// simple brainfuck interpreter written in Hascal

////////////////////////////////////////////////////////////////////////////////
//               BRAINFUCK IMPLEMENTATION IN POCKETLANG                      //
///////////////////////////////////////////////////////////////////////////////

// Reference: https://en.wikipedia.org/wiki/Brainfuck

// Note that this interpreter implementation is just to test Hascal and is
// not an efficient one. This could be optimized by evaluating the expressions
// at "compile time" (AOT) to avoid re-evaluating those expressions at runtime
// and also we can pre compile the loop jump offsets.

// Source: https://en.wikipedia.org/wiki/Brainfuck

use file

function excute(code:string) {
    var ptr = 0 // Data pointer.
    var mem : [int] = [0] // Memory.
    var ip = 0 // Instruction pointer.

    while true {
        var c = to_char(code[ip])
        ip = ip + 1

        if c == '>' {
            ptr = ptr + 1
        } else if c == '<' {
            ptr = ptr - 1
        } else if c == '+' {
            mem[ptr] = mem[ptr] + 1
        } else if c == '-' {
            mem[ptr] = mem[ptr] - 1
        } else if c == '.' {
            print(to_char(mem[ptr]))
        } else if c == ',' {
            mem[ptr] = to_int(ReadChar())
        } else if c == '[' {
            if mem[ptr] == 0 {
                var loop_count = 1
                while loop_count > 0 {
                    c = to_char(code[ip])
                    ip = ip + 1
                    if c == '[' {
                        loop_count = loop_count + 1
                    } else if c == ']' {
                        loop_count = loop_count - 1
                    }
                }
            }
        } else if c == ']' {
            if mem[ptr] != 0 {
                var loop_count = 1
                while loop_count > 0 {
                    ip = ip - 1
                    c = to_char(code[ip])
                    if c == ']' {
                        loop_count = loop_count + 1
                    } else if c == '[' {
                        loop_count = loop_count - 1
                    }
                }
            }
        } else {
            print("Unknown instruction: ", c)
        }
    }
}

function main(argv:[string]) : int {
    if len(argv) == 2 {
        excute(read_file(argv[1]))
    } else {
        print("Usage: bf <file name>")
    }
    return 0
}